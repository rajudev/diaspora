#! /bin/sh
# postinst script for gnukhata-core-engine
# copied from postinst script for hplip
# $Id: hplip.postinst,v 1.1 2005/10/15 21:39:04 hmh Exp $
#
# see: dh_installdeb(1)

set -e

# summary of how this script can be called:
#        * <postinst> `configure' <most-recently-configured-version>
#        * <old-postinst> `abort-upgrade' <new version>
#        * <conflictor's-postinst> `abort-remove' `in-favour' <package>
#          <new-version>
#        * <deconfigured's-postinst> `abort-deconfigure' `in-favour'
#          <failed-install-package> <version> `removing'
#          <conflicting-package> <version>
# for details, see http://www.debian.org/doc/debian-policy/ or
# the debian-policy package
#
# quoting from the policy:
#     Any necessary prompting should almost always be confined to the
#     post-installation script, and should be protected with a conditional
#     so that unnecessary prompting doesn't happen if a package's
#     installation fails and the `postinst' is called with `abort-upgrade',
#     `abort-remove' or `abort-deconfigure'.


. /usr/share/debconf/confmodule
. /usr/share/dbconfig-common/dpkg/postinst.pgsql

dbc_dbname="diaspora_production"
dbc_dbuser="diaspora"

dbc_go diaspora $@

case "$1" in
    configure)

	/usr/lib/diaspora/scripts/adduser.sh
	/usr/lib/diaspora/scripts/grantpriv.sh
	chown -R diaspora: /usr/share/diaspora
	cd /usr/share/diaspora
	echo "Installing gems with rubygems (their debian packages have bugs)..."
# These gems need more work before they can be apt-get
	if gem list handlebars_asstes | grep handlebars_assets
		then gem install handlebars_assets
	fi
	
	if ! gem list rails-timeago | grep rails-timeago
		then gem install rails-timeago
	fi
	
	if ! gem list foreman | grep foreman
		then gem install -v=0.62.0 foreman
	fi

	if ! gem list devise | grep devise
		then gem install -v=3.4.1 devise
	fi
	
	if ! gem list rails-assets-jquery-idletimer | grep rails-assets-jquery-idletimer
		then gem install --source https://rails-assets.org rails-assets-jquery-idletimer
	fi

	echo "Verifying we have all required libraries..."
	sudo -u diaspora bundle install --local
	echo "Initializing database..."
	sudo -u diaspora RAILS_ENV=production DB=postgres bundle exec rake db:create db:schema:load
	echo "Precompiling assets..."
	sudo -u diaspora RAILS_ENV=production DB=postgres bundle exec rake assets:precompile
	echo "Now start the service by running"
	echo "# cd /usr/share/diaspora"
	echo "# touch public/source.tar.gz"
	echo "# sudo -u diaspora RAILS_ENV=production DB=postgres ./script/server"
	echo "and visit your pod at http://localhost:3000"
   ;;

    abort-upgrade|abort-remove|abort-deconfigure)
    ;;

    *)
        echo "postinst called with unknown argument \`$1'" >&2
        exit 1
    ;;
esac

db_stop


exit 0
